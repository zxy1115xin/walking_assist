# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from unitree_motor/Ctrl.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Ctrl(genpy.Message):
  _md5sum = "2c076a68349d15f6ea7b8be4ef49b0a7"
  _type = "unitree_motor/Ctrl"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool        enable
float32     T       # Desired output torque of motor【期望电机本身的输出力矩（Nm）】 单位：Nm, T<255.9
float32     W       # Desired output speed of motor【期望电机本身的速度(rad/s)】 单位：rad/s, W<511.9
float32     Pos     #单位：rad, Pos<131071.9
float32     K_P     #K_P<31.9
float32     K_W     #K_W<63.9"""
  __slots__ = ['enable','T','W','Pos','K_P','K_W']
  _slot_types = ['bool','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enable,T,W,Pos,K_P,K_W

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Ctrl, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.enable is None:
        self.enable = False
      if self.T is None:
        self.T = 0.
      if self.W is None:
        self.W = 0.
      if self.Pos is None:
        self.Pos = 0.
      if self.K_P is None:
        self.K_P = 0.
      if self.K_W is None:
        self.K_W = 0.
    else:
      self.enable = False
      self.T = 0.
      self.W = 0.
      self.Pos = 0.
      self.K_P = 0.
      self.K_W = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B5f().pack(_x.enable, _x.T, _x.W, _x.Pos, _x.K_P, _x.K_W))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.enable, _x.T, _x.W, _x.Pos, _x.K_P, _x.K_W,) = _get_struct_B5f().unpack(str[start:end])
      self.enable = bool(self.enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B5f().pack(_x.enable, _x.T, _x.W, _x.Pos, _x.K_P, _x.K_W))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.enable, _x.T, _x.W, _x.Pos, _x.K_P, _x.K_W,) = _get_struct_B5f().unpack(str[start:end])
      self.enable = bool(self.enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B5f = None
def _get_struct_B5f():
    global _struct_B5f
    if _struct_B5f is None:
        _struct_B5f = struct.Struct("<B5f")
    return _struct_B5f
