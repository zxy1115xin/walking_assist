// Generated by gencpp from file cable_force/Config.msg
// DO NOT EDIT!


#ifndef CABLE_FORCE_MESSAGE_CONFIG_H
#define CABLE_FORCE_MESSAGE_CONFIG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cable_force
{
template <class ContainerAllocator>
struct Config_
{
  typedef Config_<ContainerAllocator> Type;

  Config_()
    : channel(0)
    , force(0.0)  {
    }
  Config_(const ContainerAllocator& _alloc)
    : channel(0)
    , force(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _channel_type;
  _channel_type channel;

   typedef float _force_type;
  _force_type force;





  typedef boost::shared_ptr< ::cable_force::Config_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cable_force::Config_<ContainerAllocator> const> ConstPtr;

}; // struct Config_

typedef ::cable_force::Config_<std::allocator<void> > Config;

typedef boost::shared_ptr< ::cable_force::Config > ConfigPtr;
typedef boost::shared_ptr< ::cable_force::Config const> ConfigConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cable_force::Config_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cable_force::Config_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cable_force::Config_<ContainerAllocator1> & lhs, const ::cable_force::Config_<ContainerAllocator2> & rhs)
{
  return lhs.channel == rhs.channel &&
    lhs.force == rhs.force;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cable_force::Config_<ContainerAllocator1> & lhs, const ::cable_force::Config_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cable_force

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cable_force::Config_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cable_force::Config_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cable_force::Config_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cable_force::Config_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cable_force::Config_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cable_force::Config_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cable_force::Config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2cda1c75dfcd91f4ed0e090f920fd0e1";
  }

  static const char* value(const ::cable_force::Config_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2cda1c75dfcd91f4ULL;
  static const uint64_t static_value2 = 0xed0e090f920fd0e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::cable_force::Config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cable_force/Config";
  }

  static const char* value(const ::cable_force::Config_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cable_force::Config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 channel\n"
"float32 force\n"
;
  }

  static const char* value(const ::cable_force::Config_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cable_force::Config_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.channel);
      stream.next(m.force);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Config_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cable_force::Config_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cable_force::Config_<ContainerAllocator>& v)
  {
    s << indent << "channel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.channel);
    s << indent << "force: ";
    Printer<float>::stream(s, indent + "  ", v.force);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CABLE_FORCE_MESSAGE_CONFIG_H
