// Generated by gencpp from file control/Command.msg
// DO NOT EDIT!


#ifndef CONTROL_MESSAGE_COMMAND_H
#define CONTROL_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace control
{
template <class ContainerAllocator>
struct Command_
{
  typedef Command_<ContainerAllocator> Type;

  Command_()
    : mode(0)
    , force(0.0)
    , kp(0.0)
    , ki(0.0)
    , kd(0.0)
    , flag(0)
    , Tsta(0.0)
    , Trise(0.0)
    , Tfall(0.0)
    , Fmax(0.0)  {
    }
  Command_(const ContainerAllocator& _alloc)
    : mode(0)
    , force(0.0)
    , kp(0.0)
    , ki(0.0)
    , kd(0.0)
    , flag(0)
    , Tsta(0.0)
    , Trise(0.0)
    , Tfall(0.0)
    , Fmax(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _mode_type;
  _mode_type mode;

   typedef float _force_type;
  _force_type force;

   typedef float _kp_type;
  _kp_type kp;

   typedef float _ki_type;
  _ki_type ki;

   typedef float _kd_type;
  _kd_type kd;

   typedef int32_t _flag_type;
  _flag_type flag;

   typedef float _Tsta_type;
  _Tsta_type Tsta;

   typedef float _Trise_type;
  _Trise_type Trise;

   typedef float _Tfall_type;
  _Tfall_type Tfall;

   typedef float _Fmax_type;
  _Fmax_type Fmax;





  typedef boost::shared_ptr< ::control::Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control::Command_<ContainerAllocator> const> ConstPtr;

}; // struct Command_

typedef ::control::Command_<std::allocator<void> > Command;

typedef boost::shared_ptr< ::control::Command > CommandPtr;
typedef boost::shared_ptr< ::control::Command const> CommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control::Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control::Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control::Command_<ContainerAllocator1> & lhs, const ::control::Command_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.force == rhs.force &&
    lhs.kp == rhs.kp &&
    lhs.ki == rhs.ki &&
    lhs.kd == rhs.kd &&
    lhs.flag == rhs.flag &&
    lhs.Tsta == rhs.Tsta &&
    lhs.Trise == rhs.Trise &&
    lhs.Tfall == rhs.Tfall &&
    lhs.Fmax == rhs.Fmax;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control::Command_<ContainerAllocator1> & lhs, const ::control::Command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control::Command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a6a1adef66b901eb18da73880940852a";
  }

  static const char* value(const ::control::Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa6a1adef66b901ebULL;
  static const uint64_t static_value2 = 0x18da73880940852aULL;
};

template<class ContainerAllocator>
struct DataType< ::control::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control/Command";
  }

  static const char* value(const ::control::Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 mode  #mode 1 力位控制 mode 2  速度模式 mode 3 位置模式\n"
"float32 force\n"
"float32 kp    #刚度 N/mm 或 PID的比例\n"
"float32 ki    \n"
"float32 kd   \n"
"int32 flag    #标志触地\n"
"float32 Tsta    #助力开始时刻\n"
"float32 Trise    #助力结束时刻\n"
"float32 Tfall    #助力开始时刻\n"
"float32 Fmax    #助力结束时刻\n"
;
  }

  static const char* value(const ::control::Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control::Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.force);
      stream.next(m.kp);
      stream.next(m.ki);
      stream.next(m.kd);
      stream.next(m.flag);
      stream.next(m.Tsta);
      stream.next(m.Trise);
      stream.next(m.Tfall);
      stream.next(m.Fmax);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control::Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control::Command_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "force: ";
    Printer<float>::stream(s, indent + "  ", v.force);
    s << indent << "kp: ";
    Printer<float>::stream(s, indent + "  ", v.kp);
    s << indent << "ki: ";
    Printer<float>::stream(s, indent + "  ", v.ki);
    s << indent << "kd: ";
    Printer<float>::stream(s, indent + "  ", v.kd);
    s << indent << "flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.flag);
    s << indent << "Tsta: ";
    Printer<float>::stream(s, indent + "  ", v.Tsta);
    s << indent << "Trise: ";
    Printer<float>::stream(s, indent + "  ", v.Trise);
    s << indent << "Tfall: ";
    Printer<float>::stream(s, indent + "  ", v.Tfall);
    s << indent << "Fmax: ";
    Printer<float>::stream(s, indent + "  ", v.Fmax);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MESSAGE_COMMAND_H
