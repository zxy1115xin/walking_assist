// Generated by gencpp from file ground_reaction_force/GRF_Data.msg
// DO NOT EDIT!


#ifndef GROUND_REACTION_FORCE_MESSAGE_GRF_DATA_H
#define GROUND_REACTION_FORCE_MESSAGE_GRF_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ground_reaction_force
{
template <class ContainerAllocator>
struct GRF_Data_
{
  typedef GRF_Data_<ContainerAllocator> Type;

  GRF_Data_()
    : fore(0.0)
    , mid(0.0)
    , hind(0.0)
    , xcop(0.0)
    , ycop(0.0)
    , all_force(0.0)
    , stance_flg(false)  {
    }
  GRF_Data_(const ContainerAllocator& _alloc)
    : fore(0.0)
    , mid(0.0)
    , hind(0.0)
    , xcop(0.0)
    , ycop(0.0)
    , all_force(0.0)
    , stance_flg(false)  {
  (void)_alloc;
    }



   typedef float _fore_type;
  _fore_type fore;

   typedef float _mid_type;
  _mid_type mid;

   typedef float _hind_type;
  _hind_type hind;

   typedef float _xcop_type;
  _xcop_type xcop;

   typedef float _ycop_type;
  _ycop_type ycop;

   typedef float _all_force_type;
  _all_force_type all_force;

   typedef uint8_t _stance_flg_type;
  _stance_flg_type stance_flg;





  typedef boost::shared_ptr< ::ground_reaction_force::GRF_Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ground_reaction_force::GRF_Data_<ContainerAllocator> const> ConstPtr;

}; // struct GRF_Data_

typedef ::ground_reaction_force::GRF_Data_<std::allocator<void> > GRF_Data;

typedef boost::shared_ptr< ::ground_reaction_force::GRF_Data > GRF_DataPtr;
typedef boost::shared_ptr< ::ground_reaction_force::GRF_Data const> GRF_DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ground_reaction_force::GRF_Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ground_reaction_force::GRF_Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ground_reaction_force::GRF_Data_<ContainerAllocator1> & lhs, const ::ground_reaction_force::GRF_Data_<ContainerAllocator2> & rhs)
{
  return lhs.fore == rhs.fore &&
    lhs.mid == rhs.mid &&
    lhs.hind == rhs.hind &&
    lhs.xcop == rhs.xcop &&
    lhs.ycop == rhs.ycop &&
    lhs.all_force == rhs.all_force &&
    lhs.stance_flg == rhs.stance_flg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ground_reaction_force::GRF_Data_<ContainerAllocator1> & lhs, const ::ground_reaction_force::GRF_Data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ground_reaction_force

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ground_reaction_force::GRF_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ground_reaction_force::GRF_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ground_reaction_force::GRF_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ground_reaction_force::GRF_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ground_reaction_force::GRF_Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ground_reaction_force::GRF_Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ground_reaction_force::GRF_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0986bb67ac829a78eeead1a9f8401cb";
  }

  static const char* value(const ::ground_reaction_force::GRF_Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0986bb67ac829a7ULL;
  static const uint64_t static_value2 = 0x8eeead1a9f8401cbULL;
};

template<class ContainerAllocator>
struct DataType< ::ground_reaction_force::GRF_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ground_reaction_force/GRF_Data";
  }

  static const char* value(const ::ground_reaction_force::GRF_Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ground_reaction_force::GRF_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 fore\n"
"float32 mid\n"
"float32 hind\n"
"float32 xcop\n"
"float32 ycop\n"
"float32 all_force\n"
"bool stance_flg\n"
;
  }

  static const char* value(const ::ground_reaction_force::GRF_Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ground_reaction_force::GRF_Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fore);
      stream.next(m.mid);
      stream.next(m.hind);
      stream.next(m.xcop);
      stream.next(m.ycop);
      stream.next(m.all_force);
      stream.next(m.stance_flg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GRF_Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ground_reaction_force::GRF_Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ground_reaction_force::GRF_Data_<ContainerAllocator>& v)
  {
    s << indent << "fore: ";
    Printer<float>::stream(s, indent + "  ", v.fore);
    s << indent << "mid: ";
    Printer<float>::stream(s, indent + "  ", v.mid);
    s << indent << "hind: ";
    Printer<float>::stream(s, indent + "  ", v.hind);
    s << indent << "xcop: ";
    Printer<float>::stream(s, indent + "  ", v.xcop);
    s << indent << "ycop: ";
    Printer<float>::stream(s, indent + "  ", v.ycop);
    s << indent << "all_force: ";
    Printer<float>::stream(s, indent + "  ", v.all_force);
    s << indent << "stance_flg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stance_flg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GROUND_REACTION_FORCE_MESSAGE_GRF_DATA_H
