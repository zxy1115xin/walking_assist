//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the book_dynamic_param package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __book_dynamic_param__DRCONFIG_H__
#define __book_dynamic_param__DRCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace book_dynamic_param
{
  class drConfigStatics;

  class drConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(drConfig &config, const drConfig &max, const drConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const drConfig &config1, const drConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, drConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const drConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, drConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const drConfig &config) const = 0;
      virtual void getValue(const drConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T drConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T drConfig::* field;

      virtual void clamp(drConfig &config, const drConfig &max, const drConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const drConfig &config1, const drConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, drConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const drConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, drConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const drConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const drConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, drConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, drConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<drConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(drConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class ASSIST_FORCE_GROUP
{
  public:
    ASSIST_FORCE_GROUP()
    {
      state = true;
      name = "Assist_force_Group";
    }

    void setParams(drConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("show"==(*_i)->name){show = boost::any_cast<bool>(val);}
        if("F_max"==(*_i)->name){F_max = boost::any_cast<double>(val);}
        if("F_rise"==(*_i)->name){F_rise = boost::any_cast<double>(val);}
        if("F_fall"==(*_i)->name){F_fall = boost::any_cast<double>(val);}
        if("F_start_r"==(*_i)->name){F_start_r = boost::any_cast<double>(val);}
        if("F_start_l"==(*_i)->name){F_start_l = boost::any_cast<double>(val);}
      }
    }

    bool show;
double F_max;
double F_rise;
double F_fall;
double F_start_r;
double F_start_l;

    bool state;
    std::string name;

    
}assist_force_group;

class GRF_GROUP
{
  public:
    GRF_GROUP()
    {
      state = true;
      name = "GRF_Group";
    }

    void setParams(drConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("gain_GRFL"==(*_i)->name){gain_GRFL = boost::any_cast<double>(val);}
        if("offset_GRFL"==(*_i)->name){offset_GRFL = boost::any_cast<double>(val);}
        if("gain_GRFR"==(*_i)->name){gain_GRFR = boost::any_cast<double>(val);}
        if("offset_GRFR"==(*_i)->name){offset_GRFR = boost::any_cast<double>(val);}
      }
    }

    double gain_GRFL;
double offset_GRFL;
double gain_GRFR;
double offset_GRFR;

    bool state;
    std::string name;

    
}grf_group;

class MODE_GROUP
{
  public:
    MODE_GROUP()
    {
      state = true;
      name = "Mode_Group";
    }

    void setParams(drConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("update_Mode"==(*_i)->name){update_Mode = boost::any_cast<bool>(val);}
        if("Mode0"==(*_i)->name){Mode0 = boost::any_cast<bool>(val);}
        if("StrDyParam"==(*_i)->name){StrDyParam = boost::any_cast<std::string>(val);}
      }
    }

    bool update_Mode;
bool Mode0;
std::string StrDyParam;

    bool state;
    std::string name;

    class FIGHT_PHASE
{
  public:
    FIGHT_PHASE()
    {
      state = true;
      name = "fight_phase";
    }

    void setParams(drConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("Mode_fight_All"==(*_i)->name){Mode_fight_All = boost::any_cast<int>(val);}
        if("Mode_fight_right_lat"==(*_i)->name){Mode_fight_right_lat = boost::any_cast<int>(val);}
        if("Mode_fight_right_Med"==(*_i)->name){Mode_fight_right_Med = boost::any_cast<int>(val);}
        if("Mode_fight_left_lat"==(*_i)->name){Mode_fight_left_lat = boost::any_cast<int>(val);}
        if("Mode_fight_left_Med"==(*_i)->name){Mode_fight_left_Med = boost::any_cast<int>(val);}
      }
    }

    int Mode_fight_All;
int Mode_fight_right_lat;
int Mode_fight_right_Med;
int Mode_fight_left_lat;
int Mode_fight_left_Med;

    bool state;
    std::string name;

    class RELEASE
{
  public:
    RELEASE()
    {
      state = true;
      name = "release";
    }

    void setParams(drConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("fight_pos_right_lat"==(*_i)->name){fight_pos_right_lat = boost::any_cast<double>(val);}
        if("fight_pos_right_Med"==(*_i)->name){fight_pos_right_Med = boost::any_cast<double>(val);}
        if("fight_pos_left_lat"==(*_i)->name){fight_pos_left_lat = boost::any_cast<double>(val);}
        if("fight_pos_left_Med"==(*_i)->name){fight_pos_left_Med = boost::any_cast<double>(val);}
      }
    }

    double fight_pos_right_lat;
double fight_pos_right_Med;
double fight_pos_left_lat;
double fight_pos_left_Med;

    bool state;
    std::string name;

    
}release;

}fight_phase;

class STANCE_PHASE
{
  public:
    STANCE_PHASE()
    {
      state = true;
      name = "stance_phase";
    }

    void setParams(drConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("Mode_stance_All"==(*_i)->name){Mode_stance_All = boost::any_cast<int>(val);}
        if("Mode_stance_right_lat"==(*_i)->name){Mode_stance_right_lat = boost::any_cast<int>(val);}
        if("Mode_stance_right_Med"==(*_i)->name){Mode_stance_right_Med = boost::any_cast<int>(val);}
        if("Mode_stance_left_lat"==(*_i)->name){Mode_stance_left_lat = boost::any_cast<int>(val);}
        if("Mode_stance_left_Med"==(*_i)->name){Mode_stance_left_Med = boost::any_cast<int>(val);}
      }
    }

    int Mode_stance_All;
int Mode_stance_right_lat;
int Mode_stance_right_Med;
int Mode_stance_left_lat;
int Mode_stance_left_Med;

    bool state;
    std::string name;

    
}stance_phase;

}mode_group;

}groups;



//#line 10 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      bool show;
//#line 11 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      double F_max;
//#line 12 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      double F_rise;
//#line 13 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      double F_fall;
//#line 14 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      double F_start_r;
//#line 15 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      double F_start_l;
//#line 19 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      double gain_GRFL;
//#line 20 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      double offset_GRFL;
//#line 21 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      double gain_GRFR;
//#line 22 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      double offset_GRFR;
//#line 27 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      bool update_Mode;
//#line 28 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      bool Mode0;
//#line 29 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      std::string StrDyParam;
//#line 33 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      int Mode_fight_All;
//#line 34 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      int Mode_fight_right_lat;
//#line 35 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      int Mode_fight_right_Med;
//#line 36 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      int Mode_fight_left_lat;
//#line 37 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      int Mode_fight_left_Med;
//#line 41 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      double fight_pos_right_lat;
//#line 42 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      double fight_pos_right_Med;
//#line 43 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      double fight_pos_left_lat;
//#line 44 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      double fight_pos_left_Med;
//#line 47 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      int Mode_stance_All;
//#line 48 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      int Mode_stance_right_lat;
//#line 49 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      int Mode_stance_right_Med;
//#line 50 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      int Mode_stance_left_lat;
//#line 51 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      int Mode_stance_left_Med;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("drConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const drConfig &__max__ = __getMax__();
      const drConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const drConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const drConfig &__getDefault__();
    static const drConfig &__getMax__();
    static const drConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const drConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void drConfig::ParamDescription<std::string>::clamp(drConfig &config, const drConfig &max, const drConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class drConfigStatics
  {
    friend class drConfig;

    drConfigStatics()
    {
drConfig::GroupDescription<drConfig::DEFAULT, drConfig> Default("Default", "", 0, 0, true, &drConfig::groups);
drConfig::GroupDescription<drConfig::DEFAULT::ASSIST_FORCE_GROUP, drConfig::DEFAULT> Assist_force_Group("Assist_force_Group", "hide", 0, 1, true, &drConfig::DEFAULT::assist_force_group);
//#line 10 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.show = 0;
//#line 10 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.show = 1;
//#line 10 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.show = 0;
//#line 10 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      Assist_force_Group.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<bool>("show", "bool", 1, "显示步态参数", "", &drConfig::show)));
//#line 10 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<bool>("show", "bool", 1, "显示步态参数", "", &drConfig::show)));
//#line 11 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.F_max = 0.0;
//#line 11 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.F_max = 180.0;
//#line 11 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.F_max = 40.0;
//#line 11 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      Assist_force_Group.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("F_max", "double", 0, "A Double Parameter,", "", &drConfig::F_max)));
//#line 11 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("F_max", "double", 0, "A Double Parameter,", "", &drConfig::F_max)));
//#line 12 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.F_rise = 0.0;
//#line 12 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.F_rise = 0.5;
//#line 12 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.F_rise = 0.3;
//#line 12 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      Assist_force_Group.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("F_rise", "double", 0, "A Double Parameter", "", &drConfig::F_rise)));
//#line 12 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("F_rise", "double", 0, "A Double Parameter", "", &drConfig::F_rise)));
//#line 13 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.F_fall = 0.0;
//#line 13 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.F_fall = 0.5;
//#line 13 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.F_fall = 0.1;
//#line 13 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      Assist_force_Group.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("F_fall", "double", 0, "A Double Parameter", "", &drConfig::F_fall)));
//#line 13 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("F_fall", "double", 0, "A Double Parameter", "", &drConfig::F_fall)));
//#line 14 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.F_start_r = 0.0;
//#line 14 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.F_start_r = 0.7;
//#line 14 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.F_start_r = 0.195;
//#line 14 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      Assist_force_Group.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("F_start_r", "double", 0, "A Double Parameter", "", &drConfig::F_start_r)));
//#line 14 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("F_start_r", "double", 0, "A Double Parameter", "", &drConfig::F_start_r)));
//#line 15 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.F_start_l = 0.0;
//#line 15 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.F_start_l = 0.7;
//#line 15 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.F_start_l = 0.2;
//#line 15 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      Assist_force_Group.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("F_start_l", "double", 0, "A Double Parameter", "", &drConfig::F_start_l)));
//#line 15 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("F_start_l", "double", 0, "A Double Parameter", "", &drConfig::F_start_l)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Assist_force_Group.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(drConfig::AbstractGroupDescriptionConstPtr(new drConfig::GroupDescription<drConfig::DEFAULT::ASSIST_FORCE_GROUP, drConfig::DEFAULT>(Assist_force_Group)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(drConfig::AbstractGroupDescriptionConstPtr(new drConfig::GroupDescription<drConfig::DEFAULT::ASSIST_FORCE_GROUP, drConfig::DEFAULT>(Assist_force_Group)));
drConfig::GroupDescription<drConfig::DEFAULT::GRF_GROUP, drConfig::DEFAULT> GRF_Group("GRF_Group", "hide", 0, 2, true, &drConfig::DEFAULT::grf_group);
//#line 19 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.gain_GRFL = 0.0;
//#line 19 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.gain_GRFL = 5.0;
//#line 19 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.gain_GRFL = 1.5;
//#line 19 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      GRF_Group.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("gain_GRFL", "double", 0, "A Double Parameter", "", &drConfig::gain_GRFL)));
//#line 19 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("gain_GRFL", "double", 0, "A Double Parameter", "", &drConfig::gain_GRFL)));
//#line 20 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.offset_GRFL = -1000.0;
//#line 20 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.offset_GRFL = 500.0;
//#line 20 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.offset_GRFL = -200.0;
//#line 20 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      GRF_Group.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("offset_GRFL", "double", 0, "A Double Parameter", "", &drConfig::offset_GRFL)));
//#line 20 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("offset_GRFL", "double", 0, "A Double Parameter", "", &drConfig::offset_GRFL)));
//#line 21 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.gain_GRFR = 0.0;
//#line 21 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.gain_GRFR = 5.0;
//#line 21 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.gain_GRFR = 1.0;
//#line 21 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      GRF_Group.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("gain_GRFR", "double", 0, "A Double Parameter", "", &drConfig::gain_GRFR)));
//#line 21 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("gain_GRFR", "double", 0, "A Double Parameter", "", &drConfig::gain_GRFR)));
//#line 22 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.offset_GRFR = -1000.0;
//#line 22 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.offset_GRFR = 500.0;
//#line 22 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.offset_GRFR = -200.0;
//#line 22 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      GRF_Group.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("offset_GRFR", "double", 0, "A Double Parameter", "", &drConfig::offset_GRFR)));
//#line 22 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("offset_GRFR", "double", 0, "A Double Parameter", "", &drConfig::offset_GRFR)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      GRF_Group.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(drConfig::AbstractGroupDescriptionConstPtr(new drConfig::GroupDescription<drConfig::DEFAULT::GRF_GROUP, drConfig::DEFAULT>(GRF_Group)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(drConfig::AbstractGroupDescriptionConstPtr(new drConfig::GroupDescription<drConfig::DEFAULT::GRF_GROUP, drConfig::DEFAULT>(GRF_Group)));
drConfig::GroupDescription<drConfig::DEFAULT::MODE_GROUP, drConfig::DEFAULT> Mode_Group("Mode_Group", "hide", 0, 3, true, &drConfig::DEFAULT::mode_group);
//#line 27 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.update_Mode = 0;
//#line 27 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.update_Mode = 1;
//#line 27 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.update_Mode = 0;
//#line 27 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      Mode_Group.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<bool>("update_Mode", "bool", 0, "A Bool Parameter", "", &drConfig::update_Mode)));
//#line 27 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<bool>("update_Mode", "bool", 0, "A Bool Parameter", "", &drConfig::update_Mode)));
//#line 28 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.Mode0 = 0;
//#line 28 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.Mode0 = 1;
//#line 28 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.Mode0 = 0;
//#line 28 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      Mode_Group.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<bool>("Mode0", "bool", 0, "快速放松", "", &drConfig::Mode0)));
//#line 28 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<bool>("Mode0", "bool", 0, "快速放松", "", &drConfig::Mode0)));
//#line 29 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.StrDyParam = "";
//#line 29 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.StrDyParam = "";
//#line 29 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.StrDyParam = "Mode=8 支撑学习；Mode=9支撑停止学习 ；Mode=10 摆动学习；Mode=11摆动停止学习";
//#line 29 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      Mode_Group.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<std::string>("StrDyParam", "str", 0, "备注", "", &drConfig::StrDyParam)));
//#line 29 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<std::string>("StrDyParam", "str", 0, "备注", "", &drConfig::StrDyParam)));
drConfig::GroupDescription<drConfig::DEFAULT::MODE_GROUP::FIGHT_PHASE, drConfig::DEFAULT::MODE_GROUP> fight_phase("fight_phase", "hide", 3, 4, true, &drConfig::DEFAULT::MODE_GROUP::fight_phase);
//#line 33 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.Mode_fight_All = 0;
//#line 33 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.Mode_fight_All = 20;
//#line 33 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.Mode_fight_All = 1;
//#line 33 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      fight_phase.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_fight_All", "int", 1, "摆动相，请 Mode =10 or 11", "", &drConfig::Mode_fight_All)));
//#line 33 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_fight_All", "int", 1, "摆动相，请 Mode =10 or 11", "", &drConfig::Mode_fight_All)));
//#line 34 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.Mode_fight_right_lat = 0;
//#line 34 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.Mode_fight_right_lat = 20;
//#line 34 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.Mode_fight_right_lat = 1;
//#line 34 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      fight_phase.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_fight_right_lat", "int", 1, "A Double Parameter", "", &drConfig::Mode_fight_right_lat)));
//#line 34 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_fight_right_lat", "int", 1, "A Double Parameter", "", &drConfig::Mode_fight_right_lat)));
//#line 35 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.Mode_fight_right_Med = 0;
//#line 35 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.Mode_fight_right_Med = 20;
//#line 35 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.Mode_fight_right_Med = 1;
//#line 35 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      fight_phase.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_fight_right_Med", "int", 1, "A Double Parameter", "", &drConfig::Mode_fight_right_Med)));
//#line 35 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_fight_right_Med", "int", 1, "A Double Parameter", "", &drConfig::Mode_fight_right_Med)));
//#line 36 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.Mode_fight_left_lat = 0;
//#line 36 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.Mode_fight_left_lat = 20;
//#line 36 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.Mode_fight_left_lat = 1;
//#line 36 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      fight_phase.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_fight_left_lat", "int", 1, "A Double Parameter", "", &drConfig::Mode_fight_left_lat)));
//#line 36 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_fight_left_lat", "int", 1, "A Double Parameter", "", &drConfig::Mode_fight_left_lat)));
//#line 37 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.Mode_fight_left_Med = 0;
//#line 37 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.Mode_fight_left_Med = 20;
//#line 37 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.Mode_fight_left_Med = 1;
//#line 37 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      fight_phase.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_fight_left_Med", "int", 1, "A Double Parameter", "", &drConfig::Mode_fight_left_Med)));
//#line 37 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_fight_left_Med", "int", 1, "A Double Parameter", "", &drConfig::Mode_fight_left_Med)));
drConfig::GroupDescription<drConfig::DEFAULT::MODE_GROUP::FIGHT_PHASE::RELEASE, drConfig::DEFAULT::MODE_GROUP::FIGHT_PHASE> release("release", "hide", 4, 5, false, &drConfig::DEFAULT::MODE_GROUP::FIGHT_PHASE::release);
//#line 41 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.fight_pos_right_lat = -0.1;
//#line 41 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.fight_pos_right_lat = 1.5;
//#line 41 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.fight_pos_right_lat = 1.0;
//#line 41 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      release.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("fight_pos_right_lat", "double", 1, "A Double Parameter", "", &drConfig::fight_pos_right_lat)));
//#line 41 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("fight_pos_right_lat", "double", 1, "A Double Parameter", "", &drConfig::fight_pos_right_lat)));
//#line 42 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.fight_pos_right_Med = -0.1;
//#line 42 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.fight_pos_right_Med = 1.5;
//#line 42 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.fight_pos_right_Med = 1.0;
//#line 42 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      release.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("fight_pos_right_Med", "double", 1, "A Double Parameter", "", &drConfig::fight_pos_right_Med)));
//#line 42 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("fight_pos_right_Med", "double", 1, "A Double Parameter", "", &drConfig::fight_pos_right_Med)));
//#line 43 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.fight_pos_left_lat = -0.1;
//#line 43 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.fight_pos_left_lat = 1.5;
//#line 43 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.fight_pos_left_lat = 1.0;
//#line 43 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      release.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("fight_pos_left_lat", "double", 1, "A Double Parameter", "", &drConfig::fight_pos_left_lat)));
//#line 43 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("fight_pos_left_lat", "double", 1, "A Double Parameter", "", &drConfig::fight_pos_left_lat)));
//#line 44 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.fight_pos_left_Med = -0.1;
//#line 44 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.fight_pos_left_Med = 1.5;
//#line 44 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.fight_pos_left_Med = 1.0;
//#line 44 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      release.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("fight_pos_left_Med", "double", 1, "A Double Parameter", "", &drConfig::fight_pos_left_Med)));
//#line 44 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<double>("fight_pos_left_Med", "double", 1, "A Double Parameter", "", &drConfig::fight_pos_left_Med)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      release.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      fight_phase.groups.push_back(drConfig::AbstractGroupDescriptionConstPtr(new drConfig::GroupDescription<drConfig::DEFAULT::MODE_GROUP::FIGHT_PHASE::RELEASE, drConfig::DEFAULT::MODE_GROUP::FIGHT_PHASE>(release)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(drConfig::AbstractGroupDescriptionConstPtr(new drConfig::GroupDescription<drConfig::DEFAULT::MODE_GROUP::FIGHT_PHASE::RELEASE, drConfig::DEFAULT::MODE_GROUP::FIGHT_PHASE>(release)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      fight_phase.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Mode_Group.groups.push_back(drConfig::AbstractGroupDescriptionConstPtr(new drConfig::GroupDescription<drConfig::DEFAULT::MODE_GROUP::FIGHT_PHASE, drConfig::DEFAULT::MODE_GROUP>(fight_phase)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(drConfig::AbstractGroupDescriptionConstPtr(new drConfig::GroupDescription<drConfig::DEFAULT::MODE_GROUP::FIGHT_PHASE, drConfig::DEFAULT::MODE_GROUP>(fight_phase)));
drConfig::GroupDescription<drConfig::DEFAULT::MODE_GROUP::STANCE_PHASE, drConfig::DEFAULT::MODE_GROUP> stance_phase("stance_phase", "hide", 3, 6, true, &drConfig::DEFAULT::MODE_GROUP::stance_phase);
//#line 47 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.Mode_stance_All = 0;
//#line 47 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.Mode_stance_All = 20;
//#line 47 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.Mode_stance_All = 8;
//#line 47 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      stance_phase.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_stance_All", "int", 1, "支撑相，请 Mode =8 or 9", "", &drConfig::Mode_stance_All)));
//#line 47 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_stance_All", "int", 1, "支撑相，请 Mode =8 or 9", "", &drConfig::Mode_stance_All)));
//#line 48 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.Mode_stance_right_lat = 0;
//#line 48 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.Mode_stance_right_lat = 20;
//#line 48 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.Mode_stance_right_lat = 8;
//#line 48 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      stance_phase.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_stance_right_lat", "int", 1, "A Double Parameter", "", &drConfig::Mode_stance_right_lat)));
//#line 48 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_stance_right_lat", "int", 1, "A Double Parameter", "", &drConfig::Mode_stance_right_lat)));
//#line 49 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.Mode_stance_right_Med = 0;
//#line 49 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.Mode_stance_right_Med = 20;
//#line 49 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.Mode_stance_right_Med = 8;
//#line 49 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      stance_phase.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_stance_right_Med", "int", 1, "A Double Parameter", "", &drConfig::Mode_stance_right_Med)));
//#line 49 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_stance_right_Med", "int", 1, "A Double Parameter", "", &drConfig::Mode_stance_right_Med)));
//#line 50 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.Mode_stance_left_lat = 0;
//#line 50 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.Mode_stance_left_lat = 20;
//#line 50 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.Mode_stance_left_lat = 8;
//#line 50 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      stance_phase.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_stance_left_lat", "int", 1, "A Double Parameter", "", &drConfig::Mode_stance_left_lat)));
//#line 50 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_stance_left_lat", "int", 1, "A Double Parameter", "", &drConfig::Mode_stance_left_lat)));
//#line 51 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __min__.Mode_stance_left_Med = 0;
//#line 51 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __max__.Mode_stance_left_Med = 20;
//#line 51 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __default__.Mode_stance_left_Med = 8;
//#line 51 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      stance_phase.abstract_parameters.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_stance_left_Med", "int", 1, "A Double Parameter", "", &drConfig::Mode_stance_left_Med)));
//#line 51 "/home/c208/walking_assist/src/strategy/cfg/DynamicParam.cfg"
      __param_descriptions__.push_back(drConfig::AbstractParamDescriptionConstPtr(new drConfig::ParamDescription<int>("Mode_stance_left_Med", "int", 1, "A Double Parameter", "", &drConfig::Mode_stance_left_Med)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      stance_phase.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Mode_Group.groups.push_back(drConfig::AbstractGroupDescriptionConstPtr(new drConfig::GroupDescription<drConfig::DEFAULT::MODE_GROUP::STANCE_PHASE, drConfig::DEFAULT::MODE_GROUP>(stance_phase)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(drConfig::AbstractGroupDescriptionConstPtr(new drConfig::GroupDescription<drConfig::DEFAULT::MODE_GROUP::STANCE_PHASE, drConfig::DEFAULT::MODE_GROUP>(stance_phase)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Mode_Group.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(drConfig::AbstractGroupDescriptionConstPtr(new drConfig::GroupDescription<drConfig::DEFAULT::MODE_GROUP, drConfig::DEFAULT>(Mode_Group)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(drConfig::AbstractGroupDescriptionConstPtr(new drConfig::GroupDescription<drConfig::DEFAULT::MODE_GROUP, drConfig::DEFAULT>(Mode_Group)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(drConfig::AbstractGroupDescriptionConstPtr(new drConfig::GroupDescription<drConfig::DEFAULT, drConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<drConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<drConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<drConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    drConfig __max__;
    drConfig __min__;
    drConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const drConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static drConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &drConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const drConfig &drConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const drConfig &drConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const drConfig &drConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<drConfig::AbstractParamDescriptionConstPtr> &drConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<drConfig::AbstractGroupDescriptionConstPtr> &drConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const drConfigStatics *drConfig::__get_statics__()
  {
    const static drConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = drConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __DRRECONFIGURATOR_H__
