// Generated by gencpp from file strategy_test/Fgrf.msg
// DO NOT EDIT!


#ifndef STRATEGY_TEST_MESSAGE_FGRF_H
#define STRATEGY_TEST_MESSAGE_FGRF_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace strategy_test
{
template <class ContainerAllocator>
struct Fgrf_
{
  typedef Fgrf_<ContainerAllocator> Type;

  Fgrf_()
    : all_force(0.0)
    , stance_flg(false)  {
    }
  Fgrf_(const ContainerAllocator& _alloc)
    : all_force(0.0)
    , stance_flg(false)  {
  (void)_alloc;
    }



   typedef float _all_force_type;
  _all_force_type all_force;

   typedef uint8_t _stance_flg_type;
  _stance_flg_type stance_flg;





  typedef boost::shared_ptr< ::strategy_test::Fgrf_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::strategy_test::Fgrf_<ContainerAllocator> const> ConstPtr;

}; // struct Fgrf_

typedef ::strategy_test::Fgrf_<std::allocator<void> > Fgrf;

typedef boost::shared_ptr< ::strategy_test::Fgrf > FgrfPtr;
typedef boost::shared_ptr< ::strategy_test::Fgrf const> FgrfConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::strategy_test::Fgrf_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::strategy_test::Fgrf_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::strategy_test::Fgrf_<ContainerAllocator1> & lhs, const ::strategy_test::Fgrf_<ContainerAllocator2> & rhs)
{
  return lhs.all_force == rhs.all_force &&
    lhs.stance_flg == rhs.stance_flg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::strategy_test::Fgrf_<ContainerAllocator1> & lhs, const ::strategy_test::Fgrf_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace strategy_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::strategy_test::Fgrf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::strategy_test::Fgrf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::strategy_test::Fgrf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::strategy_test::Fgrf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::strategy_test::Fgrf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::strategy_test::Fgrf_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::strategy_test::Fgrf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3590a53ab517e32293f777e708cbb60";
  }

  static const char* value(const ::strategy_test::Fgrf_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3590a53ab517e32ULL;
  static const uint64_t static_value2 = 0x293f777e708cbb60ULL;
};

template<class ContainerAllocator>
struct DataType< ::strategy_test::Fgrf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "strategy_test/Fgrf";
  }

  static const char* value(const ::strategy_test::Fgrf_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::strategy_test::Fgrf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 all_force\n"
"bool stance_flg\n"
;
  }

  static const char* value(const ::strategy_test::Fgrf_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::strategy_test::Fgrf_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.all_force);
      stream.next(m.stance_flg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Fgrf_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::strategy_test::Fgrf_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::strategy_test::Fgrf_<ContainerAllocator>& v)
  {
    s << indent << "all_force: ";
    Printer<float>::stream(s, indent + "  ", v.all_force);
    s << indent << "stance_flg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stance_flg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STRATEGY_TEST_MESSAGE_FGRF_H
