// Generated by gencpp from file unitree_motor/Ctrl.msg
// DO NOT EDIT!


#ifndef UNITREE_MOTOR_MESSAGE_CTRL_H
#define UNITREE_MOTOR_MESSAGE_CTRL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unitree_motor
{
template <class ContainerAllocator>
struct Ctrl_
{
  typedef Ctrl_<ContainerAllocator> Type;

  Ctrl_()
    : enable(false)
    , T(0.0)
    , W(0.0)
    , Pos(0.0)
    , K_P(0.0)
    , K_W(0.0)  {
    }
  Ctrl_(const ContainerAllocator& _alloc)
    : enable(false)
    , T(0.0)
    , W(0.0)
    , Pos(0.0)
    , K_P(0.0)
    , K_W(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _enable_type;
  _enable_type enable;

   typedef float _T_type;
  _T_type T;

   typedef float _W_type;
  _W_type W;

   typedef float _Pos_type;
  _Pos_type Pos;

   typedef float _K_P_type;
  _K_P_type K_P;

   typedef float _K_W_type;
  _K_W_type K_W;





  typedef boost::shared_ptr< ::unitree_motor::Ctrl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_motor::Ctrl_<ContainerAllocator> const> ConstPtr;

}; // struct Ctrl_

typedef ::unitree_motor::Ctrl_<std::allocator<void> > Ctrl;

typedef boost::shared_ptr< ::unitree_motor::Ctrl > CtrlPtr;
typedef boost::shared_ptr< ::unitree_motor::Ctrl const> CtrlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_motor::Ctrl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_motor::Ctrl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_motor::Ctrl_<ContainerAllocator1> & lhs, const ::unitree_motor::Ctrl_<ContainerAllocator2> & rhs)
{
  return lhs.enable == rhs.enable &&
    lhs.T == rhs.T &&
    lhs.W == rhs.W &&
    lhs.Pos == rhs.Pos &&
    lhs.K_P == rhs.K_P &&
    lhs.K_W == rhs.K_W;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_motor::Ctrl_<ContainerAllocator1> & lhs, const ::unitree_motor::Ctrl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_motor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_motor::Ctrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_motor::Ctrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_motor::Ctrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_motor::Ctrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_motor::Ctrl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_motor::Ctrl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_motor::Ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c076a68349d15f6ea7b8be4ef49b0a7";
  }

  static const char* value(const ::unitree_motor::Ctrl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c076a68349d15f6ULL;
  static const uint64_t static_value2 = 0xea7b8be4ef49b0a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_motor::Ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_motor/Ctrl";
  }

  static const char* value(const ::unitree_motor::Ctrl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_motor::Ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool        enable\n"
"float32     T       # Desired output torque of motor【期望电机本身的输出力矩（Nm）】 单位：Nm, T<255.9\n"
"float32     W       # Desired output speed of motor【期望电机本身的速度(rad/s)】 单位：rad/s, W<511.9\n"
"float32     Pos     #单位：rad, Pos<131071.9\n"
"float32     K_P     #K_P<31.9\n"
"float32     K_W     #K_W<63.9\n"
;
  }

  static const char* value(const ::unitree_motor::Ctrl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_motor::Ctrl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable);
      stream.next(m.T);
      stream.next(m.W);
      stream.next(m.Pos);
      stream.next(m.K_P);
      stream.next(m.K_W);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ctrl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_motor::Ctrl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_motor::Ctrl_<ContainerAllocator>& v)
  {
    s << indent << "enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable);
    s << indent << "T: ";
    Printer<float>::stream(s, indent + "  ", v.T);
    s << indent << "W: ";
    Printer<float>::stream(s, indent + "  ", v.W);
    s << indent << "Pos: ";
    Printer<float>::stream(s, indent + "  ", v.Pos);
    s << indent << "K_P: ";
    Printer<float>::stream(s, indent + "  ", v.K_P);
    s << indent << "K_W: ";
    Printer<float>::stream(s, indent + "  ", v.K_W);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_MOTOR_MESSAGE_CTRL_H
