// Generated by gencpp from file unitree_motor/Sensor.msg
// DO NOT EDIT!


#ifndef UNITREE_MOTOR_MESSAGE_SENSOR_H
#define UNITREE_MOTOR_MESSAGE_SENSOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unitree_motor
{
template <class ContainerAllocator>
struct Sensor_
{
  typedef Sensor_<ContainerAllocator> Type;

  Sensor_()
    : motor_id(0)
    , T(0.0)
    , Pos(0.0)
    , Temp(0.0)  {
    }
  Sensor_(const ContainerAllocator& _alloc)
    : motor_id(0)
    , T(0.0)
    , Pos(0.0)
    , Temp(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _motor_id_type;
  _motor_id_type motor_id;

   typedef float _T_type;
  _T_type T;

   typedef float _Pos_type;
  _Pos_type Pos;

   typedef float _Temp_type;
  _Temp_type Temp;





  typedef boost::shared_ptr< ::unitree_motor::Sensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_motor::Sensor_<ContainerAllocator> const> ConstPtr;

}; // struct Sensor_

typedef ::unitree_motor::Sensor_<std::allocator<void> > Sensor;

typedef boost::shared_ptr< ::unitree_motor::Sensor > SensorPtr;
typedef boost::shared_ptr< ::unitree_motor::Sensor const> SensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_motor::Sensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_motor::Sensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_motor::Sensor_<ContainerAllocator1> & lhs, const ::unitree_motor::Sensor_<ContainerAllocator2> & rhs)
{
  return lhs.motor_id == rhs.motor_id &&
    lhs.T == rhs.T &&
    lhs.Pos == rhs.Pos &&
    lhs.Temp == rhs.Temp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_motor::Sensor_<ContainerAllocator1> & lhs, const ::unitree_motor::Sensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_motor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_motor::Sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_motor::Sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_motor::Sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_motor::Sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_motor::Sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_motor::Sensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_motor::Sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beee0c2c439c8763e3016584e8002537";
  }

  static const char* value(const ::unitree_motor::Sensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbeee0c2c439c8763ULL;
  static const uint64_t static_value2 = 0xe3016584e8002537ULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_motor::Sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_motor/Sensor";
  }

  static const char* value(const ::unitree_motor::Sensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_motor::Sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "char        motor_id    #Motor ID【电机ID】\n"
"float32     T           #The output torque of motor【当前实际电机输出力矩】\n"
"float32     Pos         #The motor shaft position(control board zero fixed)【当前电机位置（主控0点修正，电机关节还是以编码器0点为准）】\n"
"float32     Temp         # 温度\n"
;
  }

  static const char* value(const ::unitree_motor::Sensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_motor::Sensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_id);
      stream.next(m.T);
      stream.next(m.Pos);
      stream.next(m.Temp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_motor::Sensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_motor::Sensor_<ContainerAllocator>& v)
  {
    s << indent << "motor_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_id);
    s << indent << "T: ";
    Printer<float>::stream(s, indent + "  ", v.T);
    s << indent << "Pos: ";
    Printer<float>::stream(s, indent + "  ", v.Pos);
    s << indent << "Temp: ";
    Printer<float>::stream(s, indent + "  ", v.Temp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_MOTOR_MESSAGE_SENSOR_H
